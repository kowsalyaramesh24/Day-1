                                      LINEAR SEARCH
                                      -------------
                                      
PROGRAM:

#include<stdio.h>
#include<conio.h>
int linearsearch(int arr[],int n,int x)
{
int i;
for(i=0;i<n;i++)
if(arr[i]==x)
return i;
return -1;
}
int main(void)
{
int arr[50];
int x,m,i,n,r;
clrscr();
printf("LINEAR SEARCH\n");
printf("----------------");
printf("Enter the size of the array(max=50):\n");
scanf("%d",&m);
printf("Enter %d elements\n",m);
for(i=0;i<m;i++)
{
scanf("%d\n",&arr[i]);
}
printf("\n\nEnter any one of the elementin the array\n");
scanf("%d",&x);
n=sizeof(arr)/sizeof(arr[0]);
r=linearsearch(arr,n,x);
if(r==-1)
printf("Element is not present in array");
else
printf("Element is present at index %d",r);
getch();
return 0;
}


OUTPUT:

LINEAR SEARCH
-------------

Enter the size of the array(max=50)
5
Enter 5 elements
3
6
2
5
1

Enter any one of the element in the array
1

Element is present at index 4



                                   BINARY SEARCH
                                   -------------
                                   
PROGRAM:

int binarysearch(int arr[],int l,int r,int x)
{
if(r>=l)
{
int mid=l+(r-1)/2;
if(arr[mid]==x)
return mid;
if(arr[mid]>x)
return binarysearch(arr,l,mid-1,x);
return binarysearch(arr,mid+1,r,x);
}
return -1;
}
int main(void)
{
int arr[50];
int x,m,i,n,r;
clrscr();
printf("BINARY SEARCH\n");
printf("----------------\n");
printf("Enter the size of the array(max=50):\n");
scanf("%d",&m);
printf("Enter %d elements\n",m);
for(i=0;i<m;i++)
{
scanf("%d\n",&arr[i]);
}
printf("\n\nEnter any one of the elementin the array\n");
scanf("%d",&x);
n=sizeof(arr)/sizeof(arr[0]);
r=binarysearch(arr,0,n-1,x);
if(r==-1)
printf("Element is not present in array");
else
printf("Element is present at index %d",r);
getch();
return 0;
}


OUTPUT:

BINARY SEARCH
-------------

Enter the size of the array(max=50)
5
Enter 5 elements
3
6
2
5
1

Enter any one of the element in the array
1

Element is present at index 4



                                    TERNARY SEARCH
                                    ---------------
                                    
                                    
 PROGRAM:
 
 #include<stdio.h>
int ternarysearch(int l,int r,int key,int arr[])
{
if(r>=l)
{
int mid1=l+(r-l)/3;
int mid2=r-(r-l)/3;
if(arr[mid1]==key)
{
return mid1;
}
if(arr[mid2]==key)
{
return mid2;
}
if(key<arr[mid1])
{
return ternarysearch(l,mid1-1,key,arr);
}
else if(key>arr[mid2])
{
return ternarysearch(mid2+1,r,key,arr);
}
else
{
return ternarysearch(mid1+1,mid2-1,key,arr);
}
}
return -1;
}
int main()
{
int l,r,p,key;
int arr[]={1,2,3,4,5,6,7,8,9,10};
clrscr();
l=0;
r=9;
key=3;
p=ternarysearch(l,r,key,arr);
printf("\nIndex of %d is %d\n",key,p);
getch();
return 0;
}

OUTPUT:

Index of 3 is 2



                                   BASICS OF QUEUE
                                   ----------------
                                   
                                   
PROGRAM:

#include <iostream>
#include <cstdio>
using namespace std;
void enqueue(char queue[], char element, int& rear, int arraySize)
{
    if(rear == arraySize)  
        printf("OverFlow\n");
    else {
        queue[rear] = element;
        rear++;
    }
}


void dequeue(char queue[], int& front, int rear)
{
    if(front == rear)          
        printf("UnderFlow\n");
    else
    {
        queue[front] = 0;      
        front++;
    }
}

char Front(char queue[], int front)
{
    return queue[front];
}


int main()
{
    char queue[20] = {'r', 'o', 's', 'e'};        
    int front = 0, rear = 4;                
    int arraySize = 20; 
    int N = 3;          
    char ch;
    for(int i = 0;i < N;++i)
    {
        ch = Front(queue, front);
        enqueue(queue, ch, rear, arraySize);
        dequeue(queue, front, rear);
    }
    for(int i = front;i < rear;++i)
        printf("%c", queue[i]);
    printf("\n");
    return 0;
}


OUTPUT

esor
