                                        LINKED LIST
                                        ------------
                                        
PROGRAM:

#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<assert.h>
struct node
{
int data;
struct node *next;
};
void push(struct node** head_ref,int new_data)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
new_node->data=new_data;
new_node->next=(*head_ref);
(*head_ref)=new_node;
}
void printlist(struct node *node)
{
while(node!=NULL)
{
printf("%d->",node->data);
node=node->next;
}
}
int main()
{
struct node* head=NULL;
clrscr();
push(&head,6);
push(&head,7);
push(&head,1);
push(&head,4);
push(&head,8);
printf("\nCreated Linked list is:");
printlist(head);
getch();
return 0;
}


OUTPUT:

Created  Linklist is:
8->4->1->7->6



                                       LIST VS ARRAY
                                       --------------
                                       
                                       
 PROGRAM:
 
 #include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<assert.h>
struct node
{
int data;
struct node *next;
};
void push(struct node** head_ref,int new_data)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
new_node->data=new_data;
new_node->next=(*head_ref);
(*head_ref)=new_node;
}
void printlist(struct node *node)
{
while(node!=NULL)
{
printf("%d->",node->data);
node=node->next;
}
}
int main()
{
int arr[5]={6,7,1,4,8};
int i;
struct node* head=NULL;
clrscr();
printf("\nThe elements in array:\n");
for(i=0;i<5;i++)
{
printf("%d\n",arr[i]);
}
push(&head,6);
push(&head,7);
push(&head,1);
push(&head,4);
push(&head,8);
printf("\nThe elements in Linked list:\n");
printlist(head);
getch();
return 0;
}

OUTPUT:

The elements in array:
6
7
1
4
8

The elements in Linked list:
8->4->1->7->6


                             INSERT A NODE IN LIST
                             ---------------------
                             
PROGRAM:

#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct node
{
int data;
struct node *next;
};
void push(struct node** head_ref,int new_data)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
new_node->data=new_data;
new_node->next=(*head_ref);
(*head_ref)=new_node;
}
void insafter(struct node* prev_node,int new_data)
{
struct node *new_node=(struct node*) malloc(sizeof(struct node));
if(prev_node==NULL)
{
printf("\nThe given previous node cannot be null");
return;
}
new_node->data=new_data;
new_node->next=prev_node->next;
prev_node->next=new_node;
}
void append(struct node** head_ref,int new_data)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
struct node *last=*head_ref;
new_node->data=new_data;
new_node->next=NULL;
if(*head_ref==NULL)
{
*head_ref=new_node;
return;
}
while(last->next!=NULL)
last=last->next;
last->next=new_node;
return;
}
void printlist(struct node *node)
{
while(node!=NULL)
{
printf("%d->",node->data);
node=node->next;
}
}
int main()
{
struct node* head=NULL;
clrscr();
append(&head,6);
push(&head,7);
push(&head,1);
append(&head,4);
insafter(head->next,8);
printf("\nCreated Linked list is:");
printlist(head);
getch();
return 0;
}


OUTPUT:

Created Linked list is:1->7->8->6->4


                                 DELETE A NODE IN A LIST
                                 -----------------------
                                 
                                 
 PROGRAM:
 
 
 #include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct node
{
int data;
struct node *next;
};
void push(struct node** head_ref,int new_data)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
new_node->data=new_data;
new_node->next=(*head_ref);
(*head_ref)=new_node;
}
void deletenode(struct node** head_ref,int key)
{
struct node* temp=*head_ref,*prev;
if(temp!=NULL&&temp->data==key)
{
*head_ref=temp->next;
free(temp);
return;
}
while(temp!=NULL&&temp->data!=key)
{
prev=temp;
temp=temp->next;
}
if(temp==NULL)
return;
prev->next=temp->next;
free(temp);
}
void printlist(struct node *node)
{
while(node!=NULL)
{
printf("%d->",node->data);
node=node->next;
}
}
int main()
{
struct node* head=NULL;
clrscr();
push(&head,7);
push(&head,1);
push(&head,3);
push(&head,2);
printf("\nCreated Linked list is:\n");
printlist(head);
deletenode(&head,2);
printf("\nLinked list after deletion of 1:\n");
printlist(head);
getch();
return 0;
}


OUTPUT:

Created Linkedlist is:
2->3->1->7

Linked list after deletion of 1:
3->1->7


                                     DELETE A LIST
                                     -------------
                                     
                                    
 PROGRAM:
 
 #include<stdio.h>
#include<stdlib.h>
#include<assert.h>
struct node
{
int data;
struct node *next;
};
void deletelist(struct node** head_ref)
{
struct node* current=*head_ref;
struct node* next;
while(current!=NULL)
{
next=current->next;
free(current);
current=next;
}
*head_ref=NULL;
}
void push(struct node** head_ref,int new_data)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
new_node->data=new_data;
new_node->next=(*head_ref);
(*head_ref)=new_node;
}
void printlist(struct node *node)
{
while(node!=NULL)
{
printf("%d->",node->data);
node=node->next;
}
}

int main()
{
struct node* head=NULL;
clrscr();
push(&head,7);
push(&head,1);
push(&head,3);
push(&head,2);
printf("\nCreated Linked list is:\n");
printlist(head);
printf("\nDeleting link list:\n");
deletelist(&head);
printf("\nLinklist deleted");
getch();
return 0;
}


 OUTPUT:
 
 Created linked list is:
 2->3->1->7
 
 Deleting link list
 
 Linked list deleted
 
 
 
                                        LENGTH OF A LIST
                                        ----------------
                                        
                                        
PROGRAM:

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
void push(struct node** head_ref,int new_data)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
new_node->data=new_data;
new_node->next=(*head_ref);
(*head_ref)=new_node;
}
int getcount(struct node* head)
{
int count=0;
struct node* current=head;
while(current!=NULL)
{
count++;
current=current->next;
}
return count;
}
void printlist(struct node *node)
{
while(node!=NULL)
{
printf("%d->",node->data);
node=node->next;
}
}
int main()
{
struct node* head=NULL;
clrscr();
push(&head,7);
push(&head,1);
push(&head,3);
push(&head,2);
printf("\nCreated Linked list is:\n");
printlist(head);
printf("\nCount of nodes is %d",getcount(head));
getch();
return 0;
}


 OUTPUT:
 
 Created linked list is:
 2->3->1->7
 
 Count of nodes is:4
 
 
 
                                    SEARCH AN ELEMENT IN LIST
                                    -------------------------
                                    
PROGRAM:


#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct node
{
int key;
struct node *next;
};
void push(struct node** head_ref,int new_key)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
new_node->key=new_key;
new_node->next=(*head_ref);
(*head_ref)=new_node;
}
int search(struct node* head,int x)
{
struct node* current=head;
while(current!=NULL)
{
if(current->key==x)
printf("\n%d\n",x);
current=current->next;
}
return ;
}

void printlist(struct node *node)
{
while(node!=NULL)
{
printf("%d->",node->key);
node=node->next;
}
}
int main()
{
struct node* head=NULL;
int x=7;
clrscr();
push(&head,6);
push(&head,7);
push(&head,1);
push(&head,4);
push(&head,8);
printf("\nCreated Linked list is:\n");
printlist(head);
search(head,7)?printf("\nYES,The element is present in linklist"):printf("\nNO,The element is not present in linklist");
getch();
return 0;
}



OUTPUT:

Created linked list is:
8->4->1->7->6

7

YES,The element is present in linkedlist




                                     NTH NODE IN A LIST
                                     ------------------
                                     
                                     
PROGRAM:

#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<assert.h>
struct node
{
int data;
struct node *next;
};
void push(struct node** head_ref,int new_data)
{
struct node* new_node=(struct node*) malloc(sizeof(struct node));
new_node->data=new_data;
new_node->next=(*head_ref);
(*head_ref)=new_node;
}
int getnth(struct node* head,int index)
{
struct node *current=head;
int count=0;
while(current!=NULL)
{
if(count==index)
return(current->data);
count++;
current=current->next;
}
assert(0);
}
void printlist(struct node *node)
{
while(node!=NULL)
{
printf("%d->",node->data);
node=node->next;
}
}
int main()
{
struct node* head=NULL;
clrscr();
push(&head,6);
push(&head,7);
push(&head,1);
push(&head,4);
push(&head,8);
printf("\nCreated Linked list is:");
printlist(head);
printf("\nElement at index 3 is %d",getnth(head,3));
getch();
return 0;
}


OUTPUT:

Created Linklist is:
8->4->1->7->6

Element at index 3 is 7
